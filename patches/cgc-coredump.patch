diff --git a/linux-user/elfload.c b/linux-user/elfload.c
index a8bc667..410b275 100644
--- a/linux-user/elfload.c
+++ b/linux-user/elfload.c
@@ -1,6 +1,8 @@
 /* This is the Linux kernel elf-loading code, ported into user space */
 #include <sys/time.h>
 #include <sys/param.h>
+#include <sys/types.h>
+#include <sys/stat.h>
 
 #include <stdio.h>
 #include <sys/types.h>
@@ -45,13 +47,8 @@ typedef abi_ulong       target_elf_greg_t;
 #define tswapreg(ptr)   tswapal(ptr)
 #endif
 
-#ifdef USE_UID16
 typedef abi_ushort      target_uid_t;
 typedef abi_ushort      target_gid_t;
-#else
-typedef abi_uint        target_uid_t;
-typedef abi_uint        target_gid_t;
-#endif
 typedef abi_int         target_pid_t;
 
 unsigned long cgc_stack_top;
@@ -1384,6 +1381,19 @@ static int fill_psinfo(struct target_elf_prpsinfo *psinfo, const TaskState *ts)
     return (0);
 }
 
+const char *coredump_prefix = ".";
+void qemu_set_core_dump_prefix(const char *prefix)
+{
+    struct stat path_stat;
+    char* path = NULL;
+
+    if (stat(prefix, &path_stat) != 0)return;
+    if (!S_ISDIR(path_stat.st_mode))return;
+
+    path = (char *)malloc(PATH_MAX+1);
+    coredump_prefix = realpath(prefix, path);
+}
+
 /*
  * Constructs name of coredump file.  We have following convention
  * for the name:
@@ -1412,7 +1422,7 @@ static int core_dump_filename(const TaskState *ts, char *buf,
     base_filename = strdup(basename(filename));
     (void) strftime(timestamp, sizeof (timestamp), "%Y%m%d-%H%M%S",
                     localtime_r(&tv.tv_sec, &tm));
-    (void) snprintf(buf, bufsize, "qemu_%s_%s_%d.core",
+    (void) snprintf(buf, bufsize, "%s/qemu_%s_%s_%d.core", coredump_prefix,
                     base_filename, timestamp, (int)getpid());
     free(base_filename);
     free(filename);
diff --git a/linux-user/main.c b/linux-user/main.c
index f2a3123..bce6596 100644
--- a/linux-user/main.c
+++ b/linux-user/main.c
@@ -495,6 +495,11 @@ static void handle_arg_gdb(const char *arg)
     gdbstub_port = atoi(arg);
 }
 
+static void handle_arg_core(const char *arg)
+{
+    qemu_set_core_dump_prefix(arg);
+}
+
 #if defined(CONFIG_USE_GUEST_BASE)
 static void handle_arg_guest_base(const char *arg)
 {
@@ -617,6 +622,8 @@ static const struct qemu_argument arg_table[] = {
      "",           "print this help"},
     {"g",          "QEMU_GDB",         true,  handle_arg_gdb,
      "port",       "wait gdb connection to 'port'"},
+    {"C",          "QEMU_CORE_PREFIX", true,  handle_arg_core,
+     "path",       "set coredump path prefix to 'path' (default '.')"},
 #if defined(CONFIG_USE_GUEST_BASE)
     {"B",          "QEMU_GUEST_BASE",  true,  handle_arg_guest_base,
      "address",    "set guest_base address to 'address'"},
diff --git a/linux-user/qemu.h b/linux-user/qemu.h
index 48d1abc..dc90d1f 100644
--- a/linux-user/qemu.h
+++ b/linux-user/qemu.h
@@ -144,6 +144,7 @@ int loader_exec(int fdexec, const char *filename, char **argv, char **envp,
              struct linux_binprm *);
 
 int load_elf_binary(struct linux_binprm *bprm, struct image_info *info);
+void qemu_set_core_dump_prefix(const char *prefix);
 
 abi_long memcpy_to_target(abi_ulong dest, const void *src,
                           unsigned long len);
diff --git a/linux-user/signal.c b/linux-user/signal.c
index 6ff19f4..0d53360 100644
--- a/linux-user/signal.c
+++ b/linux-user/signal.c
@@ -465,11 +465,11 @@ static void QEMU_NORETURN force_sig(int target_sig)
         getrlimit(RLIMIT_CORE, &nodump);
         nodump.rlim_cur=0;
         setrlimit(RLIMIT_CORE, &nodump);
-        qemu_log("qemu: uncaught target signal %d (%s) - %s [%08x]\n",
-            target_sig, strsignal(host_sig), "core dumped",env->eip);
-        (void) fprintf(stderr, "qemu: uncaught target signal %d (%s) - %s\n",
-            target_sig, strsignal(host_sig), "core dumped" );
     }
+    (void) fprintf(stderr, "qemu: uncaught target signal %d (%s) - %s [%08x]\n",
+        target_sig, strsignal(host_sig), "core dumped", env->eip);
+    qemu_log("qemu: uncaught target signal %d (%s) - %s [%08x]\n",
+        target_sig, strsignal(host_sig), "core dumped",env->eip);
 
     /* The proper exit code for dying from an uncaught signal is
      * -<signal>.  The kernel doesn't allow exit() or _exit() to pass
